#!/usr/bin/env php
<?php

/**
 * @file
 * Cream command line tool.
 */

$loader = require __DIR__.'/../vendor/autoload.php';
$loader->add('sleepingmonk', __DIR__.'/../src/');

use sleepingmonk\Console\Cream;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;

(new SingleCommandApplication())
  ->addArgument('file', InputArgument::OPTIONAL, 'The file to cream.')
  ->addOption('report', 'r', InputOption::VALUE_NONE, 'Show report for existing file.')
  ->setCode(function (InputInterface $input, OutputInterface $output) {
    $filename = $input->getArgument('file') . '.json';

    if ($filename == '.json') {
      $filename = readline("\nEnter the filename: ") . '.json';
    }

    @$file = fopen($filename, 'r');

    if (!$file) {
      $output->writeln("\nCould not open file $filename. Creating it.");
      $file = touch($filename);
    }

    $cream = new Cream($filename);

    if ($input->getOption('report')) {
      $output->writeln("\n\nThe cream has risen!\n");
      $cream->report();
      exit();
    }

    if (empty($cream->getItems())) {
      while (TRUE) {
        $items = $cream->getItems();
        $count = is_array($items) ? count($items) : 0;
        $output->writeln("\n$count items found in file. Please add at least " . max(2 - $count, 0) . " items.");
        $item = readline('Type an item for comparison: [enter to finish] ');

        if ($item) {
          $cream->addItem($item);
        }

        if (!$item && count($cream->getItems()) >= 2) {
          break;
        }

      }
    }

    if (empty($cream->getDimensions())) {
      while (TRUE) {
        $dimensions = $cream->getDimensions();
        $count = is_array($dimensions) ? count($dimensions) : 0;
        $output->writeln("\n$count dimensions found in file. Please add at least " . max(2 - $count, 0) . " dimensions.");
        $item = readline('Type a dimension for comparison: [enter to finish] ');

        if ($item) {
          $cream->addDimension($item);
        }

        if (!$item && count($cream->getDimensions()) >= 2) {
          break;
        }
      }
    }

    $output->writeln("\nCreaming " . $filename . " with dimensions: " . implode(',', $cream->getDimensions()));

    $output->writeln("Let's GO!");

    $dimensions = $cream->getDimensions();

    foreach ($dimensions as $dimension) {
      $items = $cream->getItems();
      $output->writeln("\n------------------ $dimension ------------------");

      while (!empty($items)) {
        $exists = false;
        while (!$exists) {
          $i = rand(0, count($items));
          $exists = array_key_exists($i, $items);
        }
        $a = $items[$i];
        unset($items[$i]);
        $items = array_values($items);

        foreach ($items as $b) {
          $output->writeln("\nDimension: " . $dimension);
          $output->writeln("\n1) " . $a . " vs 0) " . $b);
          $prompt = "\nWho wins? [1/0] ";
          $winner = null;

          while ($winner != '1' && $winner != '0') {
            readline_callback_handler_install($prompt, function() {});
            $winner = stream_get_contents(STDIN, 1);

            if ($winner == '1') {
              $output->writeln("\n" . $a . " wins!");
              $cream->increment($a, $dimension);
            }

            if ($winner == '0') {
              $output->writeln("\n" . $b . " wins!");
              $cream->increment($b, $dimension);
            }
          }
        }
      }
    }

    $cream->writeJson();
    $output->writeln("\n\nThe cream has risen!\n");
    $cream->report();
  })
  ->run();
